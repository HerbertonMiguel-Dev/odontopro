// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Appointment {
  id              String   @id @default(uuid())
  appointmentDate DateTime // Data do agendamento
  time            String // horário escolhido

  serviceId String // id do serviço agendado
  service   Service @relation(fields: [serviceId], references: [id])

  userId String // id da clinica (user)
  user   User @relation(fields: [userId], references: [id])

  // Relação com o modelo Patient
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  
  // Relação 1:1 com o prontuário. O '?' indica que o prontuário é opcional
  prontuario   MedicalRecord?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id          String @id @default(uuid())
  description String

  userId String
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id       String  @id @default(uuid())
  name     String
  price    Int
  duration Int
  status   Boolean @default(true)

  userId String
  user   User @relation(fields: [userId], references: [id])

  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

model Subscription {
  id      String @id @default(uuid())
  status  String
  plan    Plan
  priceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String   @unique
  emailVerified      DateTime?
  image              String?
  address            String?  @default("")
  phone              String?  @default("")
  status             Boolean  @default(true)
  timeZone           String?
  stripe_customer_id String?
  times              String[]  @default([])

  subscription  Subscription?
  services      Service[]
  reminders     Reminder[]
  appointments  Appointment[]

  patients      Patient[]

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id         String @id @default(uuid())
  name       String
  email      String @unique
  phone      String
  birthDate  DateTime? // Adiciona o campo data de nascimento

  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  userId String
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalRecord {
  id          String   @id @default(uuid())
  notes       String?
  procedures  String?
  
  // Relação com o paciente
  patientId   String
  patient     Patient @relation(fields: [patientId], references: [id])

  // Relação 1:1 com o agendamento
  // O campo 'appointmentId' deve ser UNIQUE para garantir a relação 1:1
  appointmentId String  @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}